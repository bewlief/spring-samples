/*
 * $Id$
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.struts.apps.mailreader;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

//Generated by Selenium IDE
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer.MethodName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import io.github.bonigarcia.wdm.WebDriverManager;

/**
 * Subscribers can maintain a set of email subscriptions for an account.
 *
 * @author Stefan Graff
 * @since 1.3.11
 */
@TestMethodOrder(MethodName.class)
public class IT_5Maintain {
  private WebDriver driver;
  private String home;

  @BeforeEach
  public void setUp() {
    driver = WebDriverManager.getInstance().create();
    home = "http://localhost:"
            + System.getProperty("cargo.servlet.port")
            + "/struts-mailreader/";
  }

  @AfterEach
  public void tearDown() {
    driver.quit();
  }

  @Test
  public void test51AddSubscriptionMss() {
    // Test name: 5_1_Add subscription (MSS)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | hermes
    // Registered username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 4 | type | name=password | m3dus4
    // Correct password
    driver.findElement(By.name("password")).sendKeys("m3dus4");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 7 | click | linkText=Edit your user registration profile |
    // Click Edit Profile
    driver.findElement(By.linkText("Edit your user registration profile")).click();
    // 8 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Registraion Edit page title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 9 | click | linkText=Add |
    // Click Add
    driver.findElement(By.linkText("Add")).click();
    // 10 | verifyTitle | Create New Mail Subscription |
    // Add Subscription title
    assertEquals("Create New Mail Subscription", driver.getTitle());
    // 11 | type | name=host | mail.agoraware.com
    // Mail Server
    driver.findElement(By.name("host")).sendKeys("mail.agoraware.com");
    // 12 | type | name=username | hermes
    // Mail Username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 13 | type | name=password | Ar14Dn3
    // Mail Password
    driver.findElement(By.name("password")).sendKeys("Ar14Dn3");
    // 14 | select | name=type | value=imap
    // Server Type
    {
      WebElement dropdown = driver.findElement(By.name("type"));
      dropdown.findElement(By.cssSelector("*[value='imap']")).click();
    }
    // 15 | check | name=autoConnect |
    // Auto connect
    {
      WebElement element = driver.findElement(By.name("autoConnect"));
      if (!element.isSelected()) {
        element.click();
      }
    }
    // 16 | click | name=DO_SUBMIT |
    // Save subscription
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 17 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Edit registration title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 18 | click | name=DO_SUBMIT |
    // Save user
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 19 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 20 | click | linkText=Log off MailReader Demonstration Application |
    // Logoff Hermes
    driver.findElement(By.linkText("Log off MailReader Demonstration Application")).click();
    // 21 | verifyTitle | MailReader Demonstration Application |
    // Welcome page title
    assertEquals("MailReader Demonstration Application", driver.getTitle());
  }
  @Test
  public void test52AddDuplicateHost3c() {
    // Test name: 5_2_Add duplicate host (3c)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | hermes
    // Registered username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 4 | type | name=password | m3dus4
    // Correct password
    driver.findElement(By.name("password")).sendKeys("m3dus4");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 7 | click | linkText=Edit your user registration profile |
    // Click Edit Profile
    driver.findElement(By.linkText("Edit your user registration profile")).click();
    // 8 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Registraion Edit page title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 9 | click | linkText=Add |
    // Click Add
    driver.findElement(By.linkText("Add")).click();
    // 10 | verifyTitle | Create New Mail Subscription |
    // Add Subscription title
    assertEquals("Create New Mail Subscription", driver.getTitle());
    // 11 | type | name=host | mail.agoraware.com
    // Mail Server
    driver.findElement(By.name("host")).sendKeys("mail.agoraware.com");
    // 12 | type | name=username | hermes
    // Mail Username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 13 | type | name=password | Ar14Dn3
    // Mail Password
    driver.findElement(By.name("password")).sendKeys("Ar14Dn3");
    // 14 | select | name=type | value=imap
    // Server Type
    {
      WebElement dropdown = driver.findElement(By.name("type"));
      dropdown.findElement(By.cssSelector("*[value='imap']")).click();
    }
    // 15 | check | name=autoConnect |
    // Auto connect
    {
      WebElement element = driver.findElement(By.name("autoConnect"));
      if (!element.isSelected()) {
        element.click();
      }
    }
    // 16 | click | name=DO_SUBMIT |
    // Save subscription
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 17 | assertElementPresent | xpath=//*[contains(text(),'An unexpected error has occured')] |
    // FIXME: throws Runtime error, "Illegal argument"
    {
      List<WebElement> elements = driver.findElements(By.xpath("//*[contains(text(),\'An unexpected error has occured\')]"));
      assertTrue(elements.size() > 0);
    }
  }
  @Test
  public void test53EditSubscription3a() {
    // Test name: 5_3_Edit subscription (3a)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | hermes
    // Registered username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 4 | type | name=password | m3dus4
    // Correct password
    driver.findElement(By.name("password")).sendKeys("m3dus4");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 7 | click | linkText=Edit your user registration profile |
    // Click Edit Profile
    driver.findElement(By.linkText("Edit your user registration profile")).click();
    // 8 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Registraion Edit page title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 9 | click | linkText=Edit |
    // Click Edit
    driver.findElement(By.linkText("Edit")).click();
    // 10 | verifyTitle | Edit Existing Mail Subscription |
    // Edit Subscription title
    assertEquals("Edit Existing Mail Subscription", driver.getTitle());
    // 11 | type | name=password | Fl0r1d4
    // Change Mail Password
    driver.findElement(By.name("password")).sendKeys("Fl0r1d4");
    // 12 | click | name=DO_SUBMIT |
    // Save subscription
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 13 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Edit registration title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 14 | click | name=DO_SUBMIT |
    // Save user
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 15 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 16 | click | linkText=Log off MailReader Demonstration Application |
    // Logoff Hermes
    driver.findElement(By.linkText("Log off MailReader Demonstration Application")).click();
    // 17 | verifyTitle | MailReader Demonstration Application |
    // Welcome page title
    assertEquals("MailReader Demonstration Application", driver.getTitle());
  }
  @Test
  public void test54DeleteSubscription3b() {
    // Test name: 5_4_Delete subscription (3b)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | hermes
    // Registered username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 4 | type | name=password | m3dus4
    // Correct password
    driver.findElement(By.name("password")).sendKeys("m3dus4");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 7 | click | linkText=Edit your user registration profile |
    // Click Edit Profile
    driver.findElement(By.linkText("Edit your user registration profile")).click();
    // 8 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Registraion Edit page title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 9 | click | linkText=Delete |
    // Click Delete
    driver.findElement(By.linkText("Delete")).click();
    // 10 | verifyTitle | Delete Existing Mail Subscription |
    // Delete Subscription title
    assertEquals("Delete Existing Mail Subscription", driver.getTitle());
    // 11 | click | name=DO_SUBMIT |
    // Confirm
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 12 | verifyTitle | Edit Registration for the MailReader Demonstration Application |
    // Edit registration title
    assertEquals("Edit Registration for the MailReader Demonstration Application", driver.getTitle());
    // 13 | click | name=DO_SUBMIT |
    // Save user
    driver.findElement(By.name("DO_SUBMIT")).click();
    // 14 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
    // 15 | click | linkText=Log off MailReader Demonstration Application |
    // Logoff Hermes
    driver.findElement(By.linkText("Log off MailReader Demonstration Application")).click();
    // 16 | verifyTitle | MailReader Demonstration Application |
    // Welcome page title
    assertEquals("MailReader Demonstration Application", driver.getTitle());
  }
}