/*
 * $Id$
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.struts.apps.mailreader;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

//Generated by Selenium IDE
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer.MethodName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import io.github.bonigarcia.wdm.WebDriverManager;

/**
 * Subscribers can present their registration credentials to use an account again.
 *
 * @author Stefan Graff
 * @since 1.3.11
 */
@TestMethodOrder(MethodName.class)
public class IT_4Logon {
  private WebDriver driver;
  private String home;

  @BeforeEach
  public void setUp() {
    driver = WebDriverManager.getInstance().create();
    home = "http://localhost:"
            + System.getProperty("cargo.servlet.port")
            + "/struts-mailreader/";
  }

  @AfterEach
  public void tearDown() {
    driver.quit();
  }

  @Test
  public void test41OpenLogonActionDefaultMss() {
    // Test name: 4_1_Open logon action Default (MSS)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | user
    // Default username
    driver.findElement(By.name("username")).sendKeys("user");
    // 4 | type | name=password | pass
    // Correct default password
    driver.findElement(By.name("password")).sendKeys("pass");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
  }
  @Test
  public void test42OpenLogonActionHermesMss() {
    // Test name: 4_2_Open logon action Hermes (MSS)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | hermes
    // Registered username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 4 | type | name=password | m3dus4
    // Correct password
    driver.findElement(By.name("password")).sendKeys("m3dus4");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Main Menu |
    // Menu page title
    assertEquals("MailReader Demonstration Application - Main Menu", driver.getTitle());
  }
  @Test
  public void test43LogonWrongPassword1c() {
    // Test name: 4_3_Logon - Wrong password (1c)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | hermes
    // Registered username
    driver.findElement(By.name("username")).sendKeys("hermes");
    // 4 | type | name=password | medusa
    // Wrong password
    driver.findElement(By.name("password")).sendKeys("medusa");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 7 | assertElementPresent | xpath=//*[contains(text(),'Validation Error')] |
    // Test Validation Error
    {
      List<WebElement> elements = driver.findElements(By.xpath("//*[contains(text(),\'Validation Error\')]"));
      assertTrue(elements.size() > 0);
    }
  }
  @Test
  public void test44LogonNoAccount1a() {
    // Test name: 4_4_Logon - No Account (1a)
    // Step # | name | target | value
    // 1 | open | struts-mailreader/Logon.do |
    // Pass logon
    driver.get(home + "Logon.do");
    // 2 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 3 | type | name=username | zeus
    // Not a username
    driver.findElement(By.name("username")).sendKeys("zeus");
    // 4 | type | name=password | joltBolt
    // Not a password
    driver.findElement(By.name("password")).sendKeys("joltBolt");
    // 5 | click | name=Submit |
    // Submit
    driver.findElement(By.name("Submit")).click();
    // 6 | verifyTitle | MailReader Demonstration Application - Logon |
    // Logon page title
    assertEquals("MailReader Demonstration Application - Logon", driver.getTitle());
    // 7 | assertElementPresent | xpath=//*[contains(text(),'Validation Error')] |
    // Test Validation Error
    {
      List<WebElement> elements = driver.findElements(By.xpath("//*[contains(text(),\'Validation Error\')]"));
      assertTrue(elements.size() > 0);
    }
  }
}